import boto3
from botocore.exceptions import ClientError
from bs4 import BeautifulSoup
import os
import logging
from datetime import datetime

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger()

# Initialize DynamoDB resource
dynamodb = boto3.resource('dynamodb')
table = dynamodb.Table('TextMessages')  # Your DynamoDB table name

def process_message(log):
    """Extract and return message data from a BeautifulSoup object."""
    try:
        timestamp = log.find('abbr', class_='dt')['title']
        sender = log.find('cite', class_='sender vcard').find('a', class_='tel')
        phone_number = sender['href'].replace('tel:', '') if sender else "Unknown"
        return {
            'PhoneNumber': phone_number,
            'Timestamp': timestamp,
            'Message': message_text
        }
    except AttributeError as e:
        logger.error(f"Error processing message: {e}")
        return None

def insert_into_dynamodb(item):
    """Insert an item into DynamoDB table."""
    try:
        table.put_item(Item=item)
    except ClientError as e:
        logger.error(f"Error inserting into DynamoDB: {e}")

def process_file(file_path):
    """Process a single HTML file and insert messages into DynamoDB."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        soup = BeautifulSoup(content, 'html.parser')
        chat_logs = soup.find_all('div', class_='message')
        
        for log in chat_logs:
            item = process_message(log)
            if item:
                insert_into_dynamodb(item)
        
        logger.info(f"Processed {file_path}")
    except Exception as e:
        logger.error(f"Error processing file {file_path}: {e}")

def main():
    """Main function to process all HTML files in the specified directory."""
es/'  # Update this path
    start_time = datetime.now()
    logger.info(f"Starting processing at {start_time}")

    try:
        for file_name in os.listdir(data_dir):
            if file_name.endswith('.html'):
                process_file(os.path.join(data_dir, file_name))
    except Exception as e:
        logger.error(f"Error processing directory {data_dir}: {e}")

    end_time = datetime.now()
    logger.info(f"Finished processing at {end_time}")
    logger.info(f"Total processing time: {end_time - start_time}")

if __name__ == "__main__":
    main()
